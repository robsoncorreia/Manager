<UserControl
    x:Class="FC.Manager.View.Components.LogicGateIfThenUserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:core="clr-namespace:System;assembly=mscorlib"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:device="clr-namespace:FC.Domain.Model.Device;assembly=FC.Domain"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:FC.Domain.Properties;assembly=FC.Domain"
    d:DataContext="{d:DesignInstance Type=device:ZwaveDevice}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Style>
        <Style TargetType="{x:Type UserControl}">
            <Setter Property="Visibility" Value="Visible" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsHiddenLogicGateIfThen}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Style>
    <UserControl.Resources>
        <ObjectDataProvider
            x:Key="operatorType"
            MethodName="GetValues"
            ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="device:LogicGateIfThen" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider
            x:Key="operatorTypeIfThen"
            MethodName="GetValues"
            ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="device:OperatorTypeIfThen" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </UserControl.Resources>
    <Grid>
        <Border
            Grid.Column="0"
            Height="68"
            Margin="0,0,8,0"
            VerticalAlignment="Center"
            Background="{StaticResource TundoraBillson}"
            CornerRadius="2">
            <Border.Effect>
                <DropShadowEffect BlurRadius="8" ShadowDepth="2" />
            </Border.Effect>
        </Border>
        <Border
            Grid.Column="0"
            Margin="0,0,8,0"
            VerticalAlignment="Center"
            CornerRadius="2">
            <ComboBox
                x:Name="OperatorType"
                Width="104"
                Margin="8"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                materialDesign:HintAssist.Hint="{x:Static p:Resources.Logical_operator}"
                materialDesign:ThemeAssist.Theme="Dark"
                FocusVisualStyle="{x:Null}"
                Foreground="{StaticResource MaterialDesignDarkForeground}"
                ItemsSource="{Binding Source={StaticResource operatorType}}"
                SelectedIndex="{Binding SelectedIndexLogicGateIfThen}"
                Style="{StaticResource MaterialDesignFloatingHintComboBox}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock
                            Grid.Column="1"
                            Margin="2,1"
                            Text="{Binding Path=., Converter={StaticResource enumComboboxConverter}}" />
                    </DataTemplate>
                </ComboBox.ItemTemplate>
                <ComboBox.ItemContainerStyle>
                    <Style BasedOn="{StaticResource MaterialDesignComboBoxItemStyle}" TargetType="{x:Type ComboBoxItem}">
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{StaticResource BigStoneBillson}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Path=.}" Value="{x:Static device:LogicGateIfThen.Disabled}">
                                <Setter Property="IsEnabled" Value="False" />
                                <Setter Property="Opacity" Value=".1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=.}" Value="{x:Static device:LogicGateIfThen.Nor}">
                                <Setter Property="IsEnabled" Value="False" />
                                <Setter Property="Opacity" Value=".1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=.}" Value="{x:Static device:LogicGateIfThen.Xor}">
                                <Setter Property="IsEnabled" Value="False" />
                                <Setter Property="Opacity" Value=".1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=.}" Value="{x:Static device:LogicGateIfThen.Xnor}">
                                <Setter Property="IsEnabled" Value="False" />
                                <Setter Property="Opacity" Value=".1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=.}" Value="{x:Static device:LogicGateIfThen.Nand}">
                                <Setter Property="IsEnabled" Value="False" />
                                <Setter Property="Opacity" Value=".1" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ComboBox.ItemContainerStyle>
            </ComboBox>
        </Border>
    </Grid>
</UserControl>