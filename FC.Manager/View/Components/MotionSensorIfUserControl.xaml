<UserControl
    x:Class="FC.Manager.View.Components.MotionSensorIfUserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:device="clr-namespace:FC.Domain.Model.Device;assembly=FC.Domain"
    xmlns:p="clr-namespace:FC.Domain.Properties;assembly=FC.Domain"
    xmlns:components="clr-namespace:FC.Manager.View.Components"
    xmlns:core="clr-namespace:System;assembly=mscorlib"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ObjectDataProvider
            x:Key="operatorType"
            MethodName="GetValues"
            ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="device:LogicGateIfThen" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider
            x:Key="operatorTypeIfThen"
            MethodName="GetValues"
            ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="device:OperatorTypeIfThen" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </UserControl.Resources>
    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <components:LogicGateIfThenUserControl Grid.Column="0" />
        <Border
            Grid.Column="1"
            Width="200"
            VerticalAlignment="Center"
            Background="{StaticResource TundoraBillson}"
            BorderBrush="Black"
            BorderThickness="1"
            CornerRadius="2">
            <Grid Grid.Row="1" Margin="8">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <components:ZwaveDeviceInformationUserControl
                    Grid.Row="0"
                    Grid.Column="0"
                    Grid.ColumnSpan="3" />
                <Grid
                    Grid.Row="3"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ComboBox
                        Grid.Row="3"
                        Grid.Column="0"
                        Grid.ColumnSpan="2"
                        Margin="0,8"
                        materialDesign:HintAssist.Hint="{x:Static p:Resources.Logical_comparators}"
                        materialDesign:ThemeAssist.Theme="Dark"
                        Foreground="{StaticResource MaterialDesignDarkForeground}"
                        ItemsSource="{Binding Source={StaticResource operatorTypeIfThen}}"
                        SelectedIndex="{Binding SelectedIndexOperatorType}"
                        Style="{StaticResource MaterialDesignFloatingHintComboBox}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Converter={StaticResource enumDescriptionConverter}}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <TabControl
                        Grid.Row="4"
                        Grid.Column="0"
                        Grid.ColumnSpan="2"
                        Height="100"
                        Padding="8"
                        Background="#55000000"
                        BorderBrush="#104A85"
                        BorderThickness="1"
                        SelectedIndex="{Binding SelectedTabIndexSensorType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource TabControlCustom}">
                        <TabControl.Resources>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="BorderBrush" Value="#104A85" />
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="Cursor" Value="Hand" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="TabItem">
                                            <Grid>
                                                <Border
                                                    Name="Border"
                                                    Padding="8,0"
                                                    HorizontalAlignment="Stretch"
                                                    VerticalAlignment="Stretch"
                                                    BorderThickness="1,1,1,0"
                                                    CornerRadius="2,2,0,0"
                                                    FocusVisualStyle="{x:Null}" />
                                                <ContentPresenter
                                                    x:Name="ContentSite"
                                                    Margin="6"
                                                    HorizontalAlignment="Stretch"
                                                    VerticalAlignment="Stretch"
                                                    ContentSource="Header"
                                                    FocusVisualStyle="{x:Null}"
                                                    TextBlock.FontSize="12"
                                                    TextBlock.Foreground="White" />
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="#104A85" />
                                                    <Setter Property="Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
                                                </Trigger>
                                                <Trigger Property="IsSelected" Value="False">
                                                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TabControl.Resources>
                        <TabItem Header="{x:Static p:Resources.Motion}">
                            <Grid HorizontalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton
                                    x:Name="TbDoorWindow"
                                    Grid.Column="0"
                                    FocusVisualStyle="{x:Null}"
                                    IsChecked="{Binding IsOn, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                                    Style="{StaticResource MaterialDesignActionToggleButton}"
                                    ToolTip="{Binding ElementName=TxtMotion, Path=Text}">
                                    <ToggleButton.Content>
                                        <materialDesign:PackIcon Kind="MotionSensorOff" />
                                    </ToggleButton.Content>
                                    <materialDesign:ToggleButtonAssist.OnContent>
                                        <materialDesign:PackIcon Kind="MotionSensor" />
                                    </materialDesign:ToggleButtonAssist.OnContent>
                                </ToggleButton>
                                <TextBlock
                                    x:Name="TxtMotion"
                                    Grid.Column="1"
                                    Margin="8,0,0,0"
                                    VerticalAlignment="Center"
                                    FocusVisualStyle="{x:Null}"
                                    Foreground="White"
                                    TextTrimming="CharacterEllipsis">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Text" Value="{x:Static p:Resources.Motion_detected}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ElementName=TbDoorWindow, Path=IsChecked}" Value="False">
                                                    <Setter Property="Text" Value="{x:Static p:Resources.Motion_not_detected}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </TabItem>
                        <TabItem Header="{x:Static p:Resources.Light}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <TextBox
                                    x:Name="TxtMultiLevel"
                                    Grid.Row="0"
                                    Width="160"
                                    HorizontalAlignment="Stretch"
                                    materialDesign:HintAssist.Hint="{x:Static p:Resources.Lux}"
                                    FocusVisualStyle="{x:Null}"
                                    Foreground="White"
                                    Style="{StaticResource MaterialDesignFilledTextBox}"
                                    Text="{Binding MultiLevel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </Grid>
                        </TabItem>
                    </TabControl>
                </Grid>
                <components:IfthenControlsUserControl
                    Grid.Row="0"
                    Grid.RowSpan="3"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch" />
            </Grid>
        </Border>
        <Border Grid.Column="1" CornerRadius="2">
            <Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="Background" Value="Black" />
                    <Setter Property="Opacity" Value=".9" />
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsChangedDevice}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Grid>
                <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Foreground="White"
                    Text="{x:Static p:Resources.Device_not_found}" />
                <Button
                    Margin="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Background="Red"
                    BorderBrush="Red"
                    Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Page}}, Path=DataContext.RemoveCommand}"
                    CommandParameter="{Binding Path=.}"
                    Foreground="White"
                    ToolTip="{x:Static p:Resources.Delete}">
                    <Button.Style>
                        <Style BasedOn="{StaticResource MaterialDesignRaisedButton}" TargetType="{x:Type Button}">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Setter Property="Opacity" Value=".6" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Border, Mode=FindAncestor}, Path=IsMouseOver}" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <materialDesign:PackIcon Kind="Delete" />
                </Button>
            </Grid>
        </Border>
    </Grid>
</UserControl>